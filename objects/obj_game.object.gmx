<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initGlobals();
map = Map(32, 32);
MapGenerateCave(map);

actor_list = MapGetActorList(map);
player_list = ds_list_create();
round_queue = ds_queue_create();

view = instance_create(x, y, obj_view);

world_state = WorldState.BATTLE;
state = GameState.NEXT_ROUND;
shadow = NULL;
current_round = 0;
current_actor = NULL;
animation = false;
focus_view_on_actor = NULL;
player_turn = false;
new_enemy_in_sight = false;

//place players
var i, j;
do{
    i = irandom_range(1, map.width-2);
    j = irandom_range(1, map.height-2);
}until(MapPositionEmpty(map, i, j));
var player = Player();
player.name = "Player0";
MapAddActor(map, player, i, j);
ds_list_add(player_list, player);

var cell_list = MapGetAdjacentCells(map, player.i, player.j, 3);

for(var n = 0; n &lt; ds_list_size(cell_list); n++) {
    var point = cell_list[| n];
    var player = Player();
    player.name = "Player" + string(ds_list_size(player_list));
    MapAddActor(map, player, PointGetX(point), PointGetY(point));
    ds_list_add(player_list, player);
}

// get views for players
for(var n = 0; n &lt; ds_list_size(player_list); n++) {
    var player = player_list[| n];
    ActorCalculateFOV(player);
    MapAddFOV(map, player.view_list);
}

//set view to player 1
var player = player_list[| 0];
ViewSetPosition(view, player.x, player.y);
     
//place enemies
for(var n = 0; n &lt; 8; n++) {
    var tries = 0;
    do{
        i = irandom_range(1, map.width-2);
        j = irandom_range(1, map.height-2);
    }until((MapPositionEmpty(map, i, j) &amp;&amp; !map.view_grid[# i, j]) || (tries == 1000));
    if (tries == 1000) {
        break;
    }
    var enemy = Enemy();
    enemy.name = "Enemy "+string(n);
    MapAddActor(map, enemy, i, j);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set new player FOV
MapRemoveFOV(map, current_actor.view_list);
ActorCalculateFOV(current_actor);
MapAddFOV(map, current_actor.view_list, true);
shadow = MapDrawShadow(map, shadow, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// animation = false
animation = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>delta = (delta_time/1000000)*room_speed;

updateMouse();

texture_set_interpolation(false);

if (display_get_orientation() != display_orientation) {
    setViewPort();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game loop

step = (step+1) mod MAX_STEP;

switch(world_state) {
    case WorldState.BATTLE:
        gameBattleLoop();
        break;
        
    default:
        assert(false, "world state "+string(world_state)+" not implemented");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy data

MapDestroy(map);

ds_list_destroy(player_list);
ds_queue_destroy(round_queue);

if (shadow != NULL) {
    surface_free(shadow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug
if (DEBUG) {
    var i = mouse_x div TILE_SIZE;
    var j = mouse_y div TILE_SIZE;
    if (withinBounds(i, j, 0, 0, map.width, map.height)) {
        var text;
        var actor = MapGetActor(map, i, j);
        if (actor != NULL) {
            text = ActorDebug(actor);
        } else {
            text = MapDebugPosition(map, i, j);
        }
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        var gui_x = toGuiX((i+0.5) * TILE_SIZE);
        var gui_y = toGuiY((j+0.5) * TILE_SIZE);
        var text_width = string_width(text);
        var text_height = string_height(text);
        
        draw_set_colour(c_black);
        draw_set_alpha(0.5);
        draw_rectangle(gui_x, gui_y, gui_x + text_width, gui_y + text_height, false);
        draw_set_colour(c_white);
        draw_set_alpha(1);
        draw_text(gui_x, gui_y, text);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw shadow
if (!surface_exists(shadow)) {
    var active_view = (current_actor != NULL &amp;&amp; current_actor.is_player);
    shadow = MapDrawShadow(map, shadow, active_view);
}
draw_surface_ext(shadow, 0, 0, TILE_SIZE, TILE_SIZE, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screenshot
screen_save("screenshot_"+string(current_time)+".bmp");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quit
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
