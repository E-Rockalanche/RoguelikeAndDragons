<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Data

actor = NULL;
state = ViewState.PLAYER_CONTROL;
x0 = x;
y0 = y;
x1 = x;
y1 = y;
move_time = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View

if (!IS_MOBILE) {
    var zoom = 0;
    if mouse_wheel_down() {
        //zoom out. Increase view size
        zoom = 1.1;
    } else if mouse_wheel_up() {
        //zoom in. decrease view size
        zoom = 1/1.1;
    }
    scaleView(zoom);
}

if (state == ViewState.MOVE_FOCUS_TO_ACTOR) {
    tween += 1/move_time;
    x = x0 + cubicInOutTween(tween) * (actor.x - x0);
    y = y0 + cubicInOutTween(tween) * (actor.y - y0);
    if (tween &gt;= 1) {
        state = ViewState.FOCUS_ON_ACTOR;
    }
}

if (state == ViewState.FOCUS_ON_ACTOR) {
    x = actor.x;
    y = actor.y;
}

if mouse_holding[0] {
    if mouse_holding[1] {
        var d1 = point_distance(mouse_click_x[0], mouse_click_y[0], mouse_click_x[1], mouse_click_y[1]);
        var d2 = point_distance(device_mouse_raw_x(0), device_mouse_raw_y(0), device_mouse_raw_x(1), device_mouse_raw_y(1));
        
        /*
        var d1 = sqrt(sqr(mouse_click_x[0] - mouse_click_x[1]) + sqr(mouse_click_y[0] - mouse_click_y[1]));
        var d2 = sqrt(sqr(mouse_raw_x[0] - mouse_raw_x[1]) + sqr(mouse_raw_y[0] - mouse_raw_y[1]));
        */
        
        var zoom = d2/d1;
        
        view_wview = clamp(view_wview/zoom, VIEW_WVIEW/VIEW_ZOOM_MAX, VIEW_WVIEW/VIEW_ZOOM_MIN);
        view_hview = clamp(view_hview/zoom, VIEW_HVIEW/VIEW_ZOOM_MAX, VIEW_HVIEW/VIEW_ZOOM_MIN);
        
        //update new mouse positions
        for(var m = 0; m &lt; 2; m++) {
            //save raw positions
            mouse_click_x[m] = device_mouse_raw_x(m);
            mouse_click_y[m] = device_mouse_raw_y(m);
            //save map positions
            mouse_x0[m] = device_mouse_x(m);
            mouse_y0[m] = device_mouse_y(m);
        }
    } else {
        //drag screen
        if (state == ViewState.FOCUS_ON_ACTOR) {
            state = ViewState.PLAYER_CONTROL;
        }
        if (state == ViewState.PLAYER_CONTROL) {
            x += mouse_x0[0] - device_mouse_x(0);
            y += mouse_y0[0] - device_mouse_y(0);
        }
    }
}

view_xview = x - view_wview/2;
view_yview = y - view_hview/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
